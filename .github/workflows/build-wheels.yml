name: Build Wheels

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} - Python ${{ matrix.python-version }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}
    steps:

    - name: Check out repository
      uses: actions/checkout@v4
    - name: Extract branch name
      shell: bash
      run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
      id: extract_branch

    # Ubuntu: Install CGAL and dependencies
    - name: Install CGAL on Ubuntu
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libcgal-dev \
          libeigen3-dev \
          libgmp-dev \
          libmpfr-dev \
          build-essential

    # macOS: Install CGAL and dependencies via Homebrew
    - name: Install CGAL on macOS
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install cgal eigen gmp mpfr

    # Windows: Install CGAL and dependencies via vcpkg (static libraries)
    - name: Install CGAL on Windows
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        if not exist "C:\vcpkg" (
          git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
        )
        cd /d C:\vcpkg
        if not exist "C:\vcpkg\vcpkg.exe" (
          call bootstrap-vcpkg.bat
        )
        vcpkg integrate install
        REM Install static libraries
        vcpkg install cgal:x64-windows-static eigen3:x64-windows-static gmp:x64-windows-static mpfr:x64-windows-static
        REM Set environment variable for static linking
        echo VCPKG_DEFAULT_TRIPLET=x64-windows-static >> %GITHUB_ENV%

    - name: Set up Python
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --no-interaction --no-root

    - name: Debug venv
      run: |
        ls -a
        ls -a .venv

    - name: Poetry build wheel
      run: |
        source $VENV
        mkdir -p wheelhouse
        poetry build --format wheel
        cp dist/*.whl wheelhouse/

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
        path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Extract branch name
      shell: bash
      run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
      id: extract_branch

    - name: Set up Python
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install CGAL on Ubuntu
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libcgal-dev \
          libeigen3-dev \
          libgmp-dev \
          libmpfr-dev \
          build-essential


    - name: Install dependencies
      run: poetry install --no-interaction --no-root

    - name: Poetry build

      run: |
        source $VENV
        poetry build

    - name: Upload sdist
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist/*.tar.gz

  upload_test_pypi:
    name: Upload to Test PyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    environment:
      name: testpypi
      url: https://test.pypi.org/p/cgal-alpha-wrapping
    permissions:
      id-token: write
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        merge-multiple: true

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        packages-dir: artifacts/

  upload_pypi:
    name: Upload to PyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: pypi
      url: https://pypi.org/p/cgal-alpha-wrapping
    permissions:
      id-token: write
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        merge-multiple: true

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: artifacts/